(globals().__setitem__("create_padded_buffer", __import__("pystructure").create_padded_buffer),globals().__setitem__("Superblock", type("Superblock", (object,), {"__init__":lambda self, fs_type, alloc_blocks=1<<32-1, free_blocks=1<<32-3, uuid=__import__("uuid").uuid1().hex, os=create_padded_buffer(__import__("platform").system(), 32), block_size=1<<8:(setattr(self, "__doc__", """alloc_blocks => `int 4b` of total allocated blocks\nfree_blocks  => `int 4b` of usable blocks\nuuid         => `str 32b` of hardware identifier\nfs_type      => `bytearray 4b` of filesystem revision\nos           => `str 32b` OS upon which the filesystem was mounted\nblock_size   => `int 4b` node size delimiter"""),setattr(self, "alloc_blocks", alloc_blocks),setattr(self, "free_blocks", free_blocks),setattr(self, "uuid", uuid),setattr(self, "fs_type", fs_type),setattr(self, "os", os),setattr(self, "block_size", block_size),None)[-1],"get_raw_buffer":lambda self:(globals().__setitem__("struct", __import__("struct")),"%s%s%s%s%s%s" % (struct.pack("I", self.alloc_blocks).decode('utf8', 'ignore'),struct.pack("I", self.free_blocks).decode('utf8', 'ignore'),self.uuid[:32],struct.pack("I", self.fs_type).decode('utf8', 'ignore'),self.os[:32],struct.pack("I", self.block_size).decode('utf8', 'ignore')))[-1]})),)
