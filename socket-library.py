socket = (globals().__setitem__("NOTFOUND", 0xFFFF),globals().__setitem__('setvar', lambda n, v: globals().__setitem__(n, v)),globals().__setitem__('getvar', lambda n: globals()[n] if n in globals() else NOTFOUND),setvar('create_class', lambda n, inherit=(object,), dct=(("__init__", lambda self: print("init ran")), ("__call__", lambda self: print("call ran"))): (setvar(n, type(n, inherit, dict(dct))), getvar(n))[1]),setvar("socket_", __import__("socket")),create_class("socket", dct=(("__init__",lambda self, ip, port, connect=True: (None,setattr(self, "ip", ip),setattr(self, "port", port),setattr(self, "connected", False),setattr(self, "socket", socket_.socket()),(self.socket.connect((ip, port)), setattr(self, "connected", True)) if connect else None,)[0]),("__call__",lambda self: None),("connect",lambda self: False if self.connected else self.socket.connect((self.ip, self.port))),("close",lambda self: self.socket.close() if self.connected else False),("send",lambda self, data: self.socket.send(data)),("receive",lambda self, amount: self.socket.recv(amount)),("receive_all",lambda self, ssize=4192, signal_timeout=2, _buffer=b"":(globals().__setitem__('_timeout',lambda time_, f, *args, **kwargs: (globals().__setitem__("signal", __import__("signal")),signal.signal(signal.SIGALRM, lambda _, frame: 0/0),signal.alarm(signal_timeout),f(*args, **kwargs),signal.alarm(0))),setvar("_inner_receive_all",lambda self, ssize=4192, _buffer=b"":(exec("def _autistic_receive_all(self, ssize=4192, _buffer=b''):\n\ttry: return [_autistic_receive_all(self, ssize, _buffer+data) if data else _buffer for data in [self.socket.recv(ssize)]][0]\n\texcept: return _buffer\nglobals()['_autistic_receive_all'] = _autistic_receive_all"),_autistic_receive_all)[1]),_timeout(signal_timeout, _inner_receive_all(self), self, ssize),)[-1][-2]))))[-1]
